import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import { 
  Search, 
  AlertTriangle, 
  CheckCircle, 
  XCircle, 
  Download,
  Shield,
  Wifi,
  Server,
  Globe
} from "lucide-react";

interface VulnerabilityResult {
  id: string;
  service: string;
  vulnerability: string;
  severity: "critical" | "high" | "medium" | "low";
  description: string;
  risks: string[];
  fixes: string[];
  port?: number;
}

const VulnerabilityScanner = () => {
  const [target, setTarget] = useState("");
  const [scanning, setScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [results, setResults] = useState<VulnerabilityResult[]>([]);
  const [scanType, setScanType] = useState<"network" | "website">("network");
  const { toast } = useToast();

  const vulnerabilityDatabase = [
    {
      id: "vuln_001",
      service: "SSH",
      vulnerability: "Weak SSH Configuration",
      severity: "high" as const,
      description: "SSH service is running with default configuration",
      risks: ["Brute force attacks", "Unauthorized access", "Data breaches"],
      fixes: [
        "Change default SSH port from 22",
        "Disable root login",
        "Enable key-based authentication",
        "Implement fail2ban for brute force protection"
      ],
      port: 22
    },
    {
      id: "vuln_002",
      service: "HTTP",
      vulnerability: "Unencrypted HTTP Traffic",
      severity: "medium" as const,
      description: "Website is serving content over HTTP instead of HTTPS",
      risks: ["Man-in-the-middle attacks", "Data interception", "SEO penalties"],
      fixes: [
        "Install SSL/TLS certificate",
        "Redirect HTTP to HTTPS",
        "Enable HSTS headers",
        "Update all internal links to HTTPS"
      ],
      port: 80
    },
    {
      id: "vuln_003",
      service: "FTP",
      vulnerability: "Anonymous FTP Access",
      severity: "critical" as const,
      description: "FTP server allows anonymous access",
      risks: ["Data leakage", "Unauthorized file access", "Server compromise"],
      fixes: [
        "Disable anonymous FTP access",
        "Use SFTP or FTPS instead",
        "Implement strong authentication",
        "Regular access audits"
      ],
      port: 21
    },
    {
      id: "vuln_004",
      service: "Web Server",
      vulnerability: "Outdated SSL/TLS Version",
      severity: "high" as const,
      description: "Server is using outdated SSL/TLS protocols",
      risks: ["Protocol downgrade attacks", "Weak encryption", "Compliance violations"],
      fixes: [
        "Update to TLS 1.2 or higher",
        "Disable SSLv3 and TLS 1.0/1.1",
        "Configure strong cipher suites",
        "Regular SSL certificate updates"
      ],
      port: 443
    },
    {
      id: "vuln_005",
      service: "Database",
      vulnerability: "Default Database Credentials",
      severity: "critical" as const,
      description: "Database is using default username/password",
      risks: ["Complete database compromise", "Data theft", "Privilege escalation"],
      fixes: [
        "Change default credentials immediately",
        "Create strong, unique passwords",
        "Implement role-based access control",
        "Enable database firewall"
      ],
      port: 3306
    }
  ];

  const startScan = async () => {
    if (!target) {
      toast({
        title: "Error",
        description: "Please enter a target to scan",
        variant: "destructive"
      });
      return;
    }

    setScanning(true);
    setProgress(0);
    setResults([]);

    // Simulate scanning process
    const scanSteps = 5;
    for (let i = 0; i <= scanSteps; i++) {
      await new Promise(resolve => setTimeout(resolve, 800));
      setProgress((i / scanSteps) * 100);
    }

    // Simulate vulnerability detection
    const detectedVulns = vulnerabilityDatabase.filter(() => Math.random() > 0.3);
    setResults(detectedVulns);
    setScanning(false);

    toast({
      title: "Scan Complete",
      description: `Found ${detectedVulns.length} potential vulnerabilities`,
    });
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "bg-red-500 text-white";
      case "high": return "bg-orange-500 text-white";
      case "medium": return "bg-yellow-500 text-black";
      case "low": return "bg-green-500 text-white";
      default: return "bg-gray-500 text-white";
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
      case "high":
        return <XCircle className="h-4 w-4" />;
      case "medium":
        return <AlertTriangle className="h-4 w-4" />;
      case "low":
        return <CheckCircle className="h-4 w-4" />;
      default:
        return <Shield className="h-4 w-4" />;
    }
  };

  const exportResults = () => {
    const summary = {
      total: results.length,
      critical: results.filter(r => r.severity === "critical").length,
      high: results.filter(r => r.severity === "high").length,
      medium: results.filter(r => r.severity === "medium").length,
      low: results.filter(r => r.severity === "low").length
    };

    const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vulnerability Scan Report - ${target}</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #f8fafc; color: #1a1a1a; line-height: 1.6; }
        .container { max-width: 1000px; margin: 0 auto; padding: 20px; }
        
        .report-header { 
            background: linear-gradient(135deg, #dc2626, #ef4444); 
            color: white; 
            padding: 40px; 
            border-radius: 12px; 
            margin-bottom: 30px;
            text-align: center;
        }
        .report-header h1 { font-size: 2.5rem; font-weight: 800; margin-bottom: 10px; }
        .report-header .subtitle { font-size: 1.1rem; opacity: 0.9; }
        .target-info { background: rgba(255,255,255,0.1); padding: 20px; border-radius: 8px; margin-top: 20px; }
        
        .summary-section { 
            background: white; 
            padding: 30px; 
            margin-bottom: 30px; 
            border-radius: 12px; 
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        .summary-title { font-size: 1.8rem; color: #1e293b; margin-bottom: 20px; font-weight: 700; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 20px; }
        .stat-card { 
            background: #f8fafc; 
            padding: 20px; 
            border-radius: 8px; 
            text-align: center; 
            border: 2px solid transparent;
        }
        .stat-card.critical { border-color: #dc2626; }
        .stat-card.high { border-color: #ea580c; }
        .stat-card.medium { border-color: #d97706; }
        .stat-card.low { border-color: #16a34a; }
        .stat-value { font-size: 2rem; font-weight: bold; margin-bottom: 5px; }
        .stat-critical .stat-value { color: #dc2626; }
        .stat-high .stat-value { color: #ea580c; }
        .stat-medium .stat-value { color: #d97706; }
        .stat-low .stat-value { color: #16a34a; }
        .stat-label { font-size: 0.9rem; color: #64748b; font-weight: 600; }
        
        .vulnerabilities-section { 
            background: white; 
            padding: 30px; 
            border-radius: 12px; 
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        .vuln-item { 
            padding: 25px; 
            margin-bottom: 20px; 
            border-radius: 8px; 
            border-left: 5px solid;
            background: #f8fafc;
        }
        .vuln-critical { border-left-color: #dc2626; background: #fef2f2; }
        .vuln-high { border-left-color: #ea580c; background: #fff7ed; }
        .vuln-medium { border-left-color: #d97706; background: #fffbeb; }
        .vuln-low { border-left-color: #16a34a; background: #f0fdf4; }
        
        .vuln-header { display: flex; justify-content: between; align-items: start; margin-bottom: 15px; flex-wrap: wrap; gap: 10px; }
        .vuln-service { font-size: 1.1rem; font-weight: 600; color: #1e293b; }
        .vuln-title { font-size: 1.3rem; font-weight: 700; margin: 10px 0; }
        .vuln-critical .vuln-title { color: #dc2626; }
        .vuln-high .vuln-title { color: #ea580c; }
        .vuln-medium .vuln-title { color: #d97706; }
        .vuln-low .vuln-title { color: #16a34a; }
        
        .severity-badge { 
            padding: 5px 12px; 
            border-radius: 20px; 
            font-size: 0.8rem; 
            font-weight: bold; 
            text-transform: uppercase;
        }
        .severity-critical { background: #dc2626; color: white; }
        .severity-high { background: #ea580c; color: white; }
        .severity-medium { background: #d97706; color: white; }
        .severity-low { background: #16a34a; color: white; }
        
        .vuln-description { color: #64748b; margin-bottom: 20px; }
        .risks-fixes { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }
        .risks, .fixes { }
        .section-subtitle { font-weight: 600; margin-bottom: 10px; }
        .risks .section-subtitle { color: #dc2626; }
        .fixes .section-subtitle { color: #16a34a; }
        
        .risk-list, .fix-list { list-style: none; }
        .risk-list li, .fix-list li { 
            padding: 5px 0; 
            padding-left: 20px; 
            position: relative;
        }
        .risk-list li:before { content: '⚠️'; position: absolute; left: 0; }
        .fix-list li:before { content: '✅'; position: absolute; left: 0; }
        
        .report-footer { 
            background: #1e293b; 
            color: white; 
            padding: 30px; 
            text-align: center; 
            border-radius: 12px; 
            margin-top: 30px;
        }
        .timestamp { font-size: 0.9rem; opacity: 0.8; }
        
        @media print {
            body { background: white; }
            .container { max-width: none; margin: 0; padding: 15px; }
            .summary-section, .vulnerabilities-section { box-shadow: none; border: 1px solid #ddd; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="report-header">
            <h1>🔍 Vulnerability Scan Report</h1>
            <div class="subtitle">Security Assessment for ${target}</div>
            <div class="target-info">
                <strong>Target:</strong> ${target} | 
                <strong>Scan Type:</strong> ${scanType} | 
                <strong>Date:</strong> ${new Date().toLocaleString()}
            </div>
        </div>

        <div class="summary-section">
            <h2 class="summary-title">📊 Executive Summary</h2>
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value">${summary.total}</div>
                    <div class="stat-label">Total Issues</div>
                </div>
                <div class="stat-card critical">
                    <div class="stat-value stat-critical">${summary.critical}</div>
                    <div class="stat-label">Critical</div>
                </div>
                <div class="stat-card high">
                    <div class="stat-value stat-high">${summary.high}</div>
                    <div class="stat-label">High</div>
                </div>
                <div class="stat-card medium">
                    <div class="stat-value stat-medium">${summary.medium}</div>
                    <div class="stat-label">Medium</div>
                </div>
                <div class="stat-card low">
                    <div class="stat-value stat-low">${summary.low}</div>
                    <div class="stat-label">Low</div>
                </div>
            </div>
        </div>

        <div class="vulnerabilities-section">
            <h2 class="summary-title">🛡️ Detailed Vulnerability Findings</h2>
            ${results.map(vuln => `
                <div class="vuln-item vuln-${vuln.severity}">
                    <div class="vuln-header">
                        <div>
                            <div class="vuln-service">${vuln.service}${vuln.port ? ` (Port ${vuln.port})` : ''}</div>
                            <div class="vuln-title">${vuln.vulnerability}</div>
                        </div>
                        <div class="severity-badge severity-${vuln.severity}">${vuln.severity}</div>
                    </div>
                    <div class="vuln-description">${vuln.description}</div>
                    <div class="risks-fixes">
                        <div class="risks">
                            <div class="section-subtitle">Potential Risks</div>
                            <ul class="risk-list">
                                ${vuln.risks.map(risk => `<li>${risk}</li>`).join('')}
                            </ul>
                        </div>
                        <div class="fixes">
                            <div class="section-subtitle">Recommended Fixes</div>
                            <ul class="fix-list">
                                ${vuln.fixes.map(fix => `<li>${fix}</li>`).join('')}
                            </ul>
                        </div>
                    </div>
                </div>
            `).join('')}
        </div>

        <div class="report-footer">
            <div>🔒 Generated by SecureX Vulnerability Scanner</div>
            <div class="timestamp">Report generated on ${new Date().toLocaleString()}</div>
        </div>
    </div>
</body>
</html>`;

    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `vulnerability-report-${target.replace(/[^a-zA-Z0-9]/g, '_')}-${new Date().toISOString().split('T')[0]}.html`;
    a.click();
    URL.revokeObjectURL(url);

    toast({
      title: "Report Exported",
      description: "Professional vulnerability report has been downloaded as HTML",
    });
  };

  return (
    <div className="space-y-6">
      <Card className="bg-slate-800/50 border border-slate-700">
        <CardHeader>
          <div className="flex items-center gap-2">
            <Search className="h-5 w-5 text-cyan-400" />
            <CardTitle className="text-white">Vulnerability Scanner</CardTitle>
          </div>
          <CardDescription className="text-slate-400">
            Scan for known vulnerabilities and security misconfigurations
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <Tabs value={scanType} onValueChange={(value) => setScanType(value as "network" | "website")}>
            <TabsList className="bg-slate-700">
              <TabsTrigger value="network" className="flex items-center gap-2">
                <Wifi className="h-4 w-4" />
                Network Scan
              </TabsTrigger>
              <TabsTrigger value="website" className="flex items-center gap-2">
                <Globe className="h-4 w-4" />
                Website Scan
              </TabsTrigger>
            </TabsList>
          </Tabs>

          <div className="flex gap-2">
            <Input
              placeholder={scanType === "network" ? "Enter IP address or network range (e.g., 192.168.1.1)" : "Enter website URL (e.g., https://example.com)"}
              value={target}
              onChange={(e) => setTarget(e.target.value)}
              className="bg-slate-700 border-slate-600 text-white"
              disabled={scanning}
            />
            <Button 
              onClick={startScan} 
              disabled={scanning}
              className="bg-cyan-600 hover:bg-cyan-700"
            >
              {scanning ? "Scanning..." : "Start Scan"}
            </Button>
          </div>

          {scanning && (
            <div className="space-y-2">
              <div className="flex items-center justify-between text-sm">
                <span className="text-slate-400">Scanning in progress...</span>
                <span className="text-cyan-400">{Math.round(progress)}%</span>
              </div>
              <Progress value={progress} className="h-2" />
            </div>
          )}
        </CardContent>
      </Card>

      {results.length > 0 && (
        <Card className="bg-slate-800/50 border border-slate-700">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="text-white">Scan Results</CardTitle>
                <CardDescription className="text-slate-400">
                  Found {results.length} potential vulnerabilities
                </CardDescription>
              </div>
              <Button onClick={exportResults} variant="outline" size="sm">
                <Download className="h-4 w-4 mr-2" />
                Export Report
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {results.map((vuln) => (
                <Card key={vuln.id} className="bg-slate-700/50 border border-slate-600">
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <Server className="h-4 w-4 text-cyan-400" />
                        <span className="font-medium text-white">{vuln.service}</span>
                        {vuln.port && (
                          <Badge variant="outline" className="text-xs">
                            Port {vuln.port}
                          </Badge>
                        )}
                      </div>
                      <Badge className={getSeverityColor(vuln.severity)}>
                        {getSeverityIcon(vuln.severity)}
                        <span className="ml-1 capitalize">{vuln.severity}</span>
                      </Badge>
                    </div>
                    <h4 className="font-semibold text-orange-400">{vuln.vulnerability}</h4>
                    <p className="text-sm text-slate-300">{vuln.description}</p>
                  </CardHeader>
                  <CardContent className="pt-0">
                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <h5 className="font-medium text-red-400 mb-2">Potential Risks:</h5>
                        <ul className="space-y-1">
                          {vuln.risks.map((risk, index) => (
                            <li key={index} className="text-sm text-slate-300 flex items-start gap-2">
                              <span className="text-red-400 mt-1">•</span>
                              {risk}
                            </li>
                          ))}
                        </ul>
                      </div>
                      <div>
                        <h5 className="font-medium text-green-400 mb-2">Recommended Fixes:</h5>
                        <ul className="space-y-1">
                          {vuln.fixes.map((fix, index) => (
                            <li key={index} className="text-sm text-slate-300 flex items-start gap-2">
                              <span className="text-green-400 mt-1">•</span>
                              {fix}
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {results.length === 0 && !scanning && (
        <Alert className="bg-slate-800/50 border border-slate-700">
          <Shield className="h-4 w-4" />
          <AlertDescription className="text-slate-300">
            No vulnerabilities detected. Enter a target and start scanning to identify potential security issues.
          </AlertDescription>
        </Alert>
      )}
    </div>
  );
};

export default VulnerabilityScanner;