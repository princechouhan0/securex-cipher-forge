import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import { 
  Search, 
  AlertTriangle, 
  CheckCircle, 
  XCircle, 
  Download,
  Shield,
  Wifi,
  Server,
  Globe
} from "lucide-react";

interface VulnerabilityResult {
  id: string;
  service: string;
  vulnerability: string;
  severity: "critical" | "high" | "medium" | "low";
  description: string;
  risks: string[];
  fixes: string[];
  port?: number;
}

const VulnerabilityScanner = () => {
  const [target, setTarget] = useState("");
  const [scanning, setScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [results, setResults] = useState<VulnerabilityResult[]>([]);
  const [scanType, setScanType] = useState<"network" | "website">("network");
  const { toast } = useToast();

  const vulnerabilityDatabase = [
    {
      id: "vuln_001",
      service: "SSH",
      vulnerability: "Weak SSH Configuration",
      severity: "high" as const,
      description: "SSH service is running with default configuration",
      risks: ["Brute force attacks", "Unauthorized access", "Data breaches"],
      fixes: [
        "Change default SSH port from 22",
        "Disable root login",
        "Enable key-based authentication",
        "Implement fail2ban for brute force protection"
      ],
      port: 22
    },
    {
      id: "vuln_002",
      service: "HTTP",
      vulnerability: "Unencrypted HTTP Traffic",
      severity: "medium" as const,
      description: "Website is serving content over HTTP instead of HTTPS",
      risks: ["Man-in-the-middle attacks", "Data interception", "SEO penalties"],
      fixes: [
        "Install SSL/TLS certificate",
        "Redirect HTTP to HTTPS",
        "Enable HSTS headers",
        "Update all internal links to HTTPS"
      ],
      port: 80
    },
    {
      id: "vuln_003",
      service: "FTP",
      vulnerability: "Anonymous FTP Access",
      severity: "critical" as const,
      description: "FTP server allows anonymous access",
      risks: ["Data leakage", "Unauthorized file access", "Server compromise"],
      fixes: [
        "Disable anonymous FTP access",
        "Use SFTP or FTPS instead",
        "Implement strong authentication",
        "Regular access audits"
      ],
      port: 21
    },
    {
      id: "vuln_004",
      service: "Web Server",
      vulnerability: "Outdated SSL/TLS Version",
      severity: "high" as const,
      description: "Server is using outdated SSL/TLS protocols",
      risks: ["Protocol downgrade attacks", "Weak encryption", "Compliance violations"],
      fixes: [
        "Update to TLS 1.2 or higher",
        "Disable SSLv3 and TLS 1.0/1.1",
        "Configure strong cipher suites",
        "Regular SSL certificate updates"
      ],
      port: 443
    },
    {
      id: "vuln_005",
      service: "Database",
      vulnerability: "Default Database Credentials",
      severity: "critical" as const,
      description: "Database is using default username/password",
      risks: ["Complete database compromise", "Data theft", "Privilege escalation"],
      fixes: [
        "Change default credentials immediately",
        "Create strong, unique passwords",
        "Implement role-based access control",
        "Enable database firewall"
      ],
      port: 3306
    }
  ];

  const startScan = async () => {
    if (!target) {
      toast({
        title: "Error",
        description: "Please enter a target to scan",
        variant: "destructive"
      });
      return;
    }

    setScanning(true);
    setProgress(0);
    setResults([]);

    // Simulate scanning process
    const scanSteps = 5;
    for (let i = 0; i <= scanSteps; i++) {
      await new Promise(resolve => setTimeout(resolve, 800));
      setProgress((i / scanSteps) * 100);
    }

    // Simulate vulnerability detection
    const detectedVulns = vulnerabilityDatabase.filter(() => Math.random() > 0.3);
    setResults(detectedVulns);
    setScanning(false);

    toast({
      title: "Scan Complete",
      description: `Found ${detectedVulns.length} potential vulnerabilities`,
    });
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "bg-red-500 text-white";
      case "high": return "bg-orange-500 text-white";
      case "medium": return "bg-yellow-500 text-black";
      case "low": return "bg-green-500 text-white";
      default: return "bg-gray-500 text-white";
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
      case "high":
        return <XCircle className="h-4 w-4" />;
      case "medium":
        return <AlertTriangle className="h-4 w-4" />;
      case "low":
        return <CheckCircle className="h-4 w-4" />;
      default:
        return <Shield className="h-4 w-4" />;
    }
  };

  const exportResults = () => {
    const reportData = {
      timestamp: new Date().toISOString(),
      target,
      scanType,
      vulnerabilities: results,
      summary: {
        total: results.length,
        critical: results.filter(r => r.severity === "critical").length,
        high: results.filter(r => r.severity === "high").length,
        medium: results.filter(r => r.severity === "medium").length,
        low: results.filter(r => r.severity === "low").length
      }
    };

    const blob = new Blob([JSON.stringify(reportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `vulnerability-report-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);

    toast({
      title: "Report Exported",
      description: "Vulnerability report has been downloaded",
    });
  };

  return (
    <div className="space-y-6">
      <Card className="bg-slate-800/50 border border-slate-700">
        <CardHeader>
          <div className="flex items-center gap-2">
            <Search className="h-5 w-5 text-cyan-400" />
            <CardTitle className="text-white">Vulnerability Scanner</CardTitle>
          </div>
          <CardDescription className="text-slate-400">
            Scan for known vulnerabilities and security misconfigurations
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <Tabs value={scanType} onValueChange={(value) => setScanType(value as "network" | "website")}>
            <TabsList className="bg-slate-700">
              <TabsTrigger value="network" className="flex items-center gap-2">
                <Wifi className="h-4 w-4" />
                Network Scan
              </TabsTrigger>
              <TabsTrigger value="website" className="flex items-center gap-2">
                <Globe className="h-4 w-4" />
                Website Scan
              </TabsTrigger>
            </TabsList>
          </Tabs>

          <div className="flex gap-2">
            <Input
              placeholder={scanType === "network" ? "Enter IP address or network range (e.g., 192.168.1.1)" : "Enter website URL (e.g., https://example.com)"}
              value={target}
              onChange={(e) => setTarget(e.target.value)}
              className="bg-slate-700 border-slate-600 text-white"
              disabled={scanning}
            />
            <Button 
              onClick={startScan} 
              disabled={scanning}
              className="bg-cyan-600 hover:bg-cyan-700"
            >
              {scanning ? "Scanning..." : "Start Scan"}
            </Button>
          </div>

          {scanning && (
            <div className="space-y-2">
              <div className="flex items-center justify-between text-sm">
                <span className="text-slate-400">Scanning in progress...</span>
                <span className="text-cyan-400">{Math.round(progress)}%</span>
              </div>
              <Progress value={progress} className="h-2" />
            </div>
          )}
        </CardContent>
      </Card>

      {results.length > 0 && (
        <Card className="bg-slate-800/50 border border-slate-700">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="text-white">Scan Results</CardTitle>
                <CardDescription className="text-slate-400">
                  Found {results.length} potential vulnerabilities
                </CardDescription>
              </div>
              <Button onClick={exportResults} variant="outline" size="sm">
                <Download className="h-4 w-4 mr-2" />
                Export Report
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {results.map((vuln) => (
                <Card key={vuln.id} className="bg-slate-700/50 border border-slate-600">
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <Server className="h-4 w-4 text-cyan-400" />
                        <span className="font-medium text-white">{vuln.service}</span>
                        {vuln.port && (
                          <Badge variant="outline" className="text-xs">
                            Port {vuln.port}
                          </Badge>
                        )}
                      </div>
                      <Badge className={getSeverityColor(vuln.severity)}>
                        {getSeverityIcon(vuln.severity)}
                        <span className="ml-1 capitalize">{vuln.severity}</span>
                      </Badge>
                    </div>
                    <h4 className="font-semibold text-orange-400">{vuln.vulnerability}</h4>
                    <p className="text-sm text-slate-300">{vuln.description}</p>
                  </CardHeader>
                  <CardContent className="pt-0">
                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <h5 className="font-medium text-red-400 mb-2">Potential Risks:</h5>
                        <ul className="space-y-1">
                          {vuln.risks.map((risk, index) => (
                            <li key={index} className="text-sm text-slate-300 flex items-start gap-2">
                              <span className="text-red-400 mt-1">•</span>
                              {risk}
                            </li>
                          ))}
                        </ul>
                      </div>
                      <div>
                        <h5 className="font-medium text-green-400 mb-2">Recommended Fixes:</h5>
                        <ul className="space-y-1">
                          {vuln.fixes.map((fix, index) => (
                            <li key={index} className="text-sm text-slate-300 flex items-start gap-2">
                              <span className="text-green-400 mt-1">•</span>
                              {fix}
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {results.length === 0 && !scanning && (
        <Alert className="bg-slate-800/50 border border-slate-700">
          <Shield className="h-4 w-4" />
          <AlertDescription className="text-slate-300">
            No vulnerabilities detected. Enter a target and start scanning to identify potential security issues.
          </AlertDescription>
        </Alert>
      )}
    </div>
  );
};

export default VulnerabilityScanner;